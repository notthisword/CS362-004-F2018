        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************
        -:    2: * Britany Hughes
        -:    3: * CS 362 - Fall 2018
        -:    4: * Assignment 4
        -:    5: * 7 November 2018
        -:    6: * Description: This is a random tester for the Great Hall card in
        -:    7: * the dominion.c code.
        -:    8: ********************/
        -:    9:
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <string.h>
        -:   13:#include <assert.h>
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include "rngs.h"
        -:   18:
        -:   19:/*********************
        -:   20: * Reference Data
        -:   21: * card_great_hall(int currentPlayer, struct gameState
        -:   22:		*state, int handPos)
        -:   23: * cardEffect(int card, int choice1, int choice2, int
        -:   24:		choice3, struct gameState *state, int handPos
        -:   25:		int *bonus)
        -:   26: * drawCard(int player, struct gameState *state)
        -:   27: * drawCard(currentPlayer, state)
        -:   28: * testGame.numActions++
        -:   29: * discardCard(int handPos, int currentPlayer, struct
        -:   30:		gameState *state, int trashFlag)
        -:   31: * discardCard(handPos, currentPlayer, state, 0)
        -:   32: ********************/
        -:   33: 
        -:   34: 
        1:   35: int main()
        -:   36:{
        -:   37:	//declare variables
        1:   38:	int k[10] = {adventurer, council_room, village, remodel, smithy, steward, great_hall, gardens, tribute, baron};
        -:   39:	struct gameState testGame;
        1:   40:	int playerCount = 4;
        1:   41:	int seed = 193;
        1:   42:	int tempCard = 0;
        -:   43:
        -:   44:	//initialize counters
        1:   45:	int p = 0; //player
        1:   46:	int c = 0;
        1:   47:	int h = 0; //total cards in hand
        1:   48:	int d = 0; //deck count
        -:   49:	
        1:   50:	printf("Beginning tests for Great Hall card.\n\n");
        -:   51:	
        -:   52:	//100 is an arbitrary value; can be changed
      101:   53:	for (c = 0; c < 100; c++)
        -:   54:	{
        -:   55:		//minimum player count is 2
        -:   56:		//Note: rand() % (max - min + 1) + min
      100:   57:		seed = rand() % (999 - 1 + 1) + 999;
      100:   58:		playerCount = rand() % (MAX_PLAYERS - 2 + 1) + 2;
        -:   59:		
        -:   60:		//initialize the test game
      100:   61:		initializeGame(playerCount, k, seed, &testGame);
        -:   62:		
      405:   63:		for (p = 0; p < playerCount; p++)
        -:   64:		{
        -:   65:			//reinitialize the test game on each loop through
      305:   66:			memset(&testGame, 23, sizeof(struct gameState));
      305:   67:			initializeGame(playerCount, k, seed, &testGame);
        -:   68:			
      305:   69:			if (!cardEffect(great_hall, 0, 0, 0, &testGame, 0, 0))
        -:   70:			{
      305:   71:				printf("Test failed with the following criteria on Test %d:\n", c+1);
      305:   72:				printf("Player %d of %d, Seed: %d\n", p+1, playerCount, seed);
        -:   73:			}
        -:   74:		}
        -:   75:	}
        -:   76:	
        -:   77:	//Beginning tests: is great_hall card discarded.
        -:   78:	//reinitialize the test game
        1:   79:	memset(&testGame, 23, sizeof(struct gameState));
        1:   80:	initializeGame(playerCount, k, seed, &testGame);
        1:   81:	p = 0;
        -:   82:	
        -:   83:	//set all of the cards in the player's deck to something other than great_hall
        1:   84:	d = testGame.deckCount[p];
        5:   85:	for (c = 1; c < d; c++)
        -:   86:	{
        4:   87:		int tempCard = 16; //16 is great_hall card in enum list
        -:   88:		do 
        -:   89:		{
        -:   90:			//Note: rand() % (max - min + 1) + min
        4:   91:			tempCard = rand() % (26 - 0 + 1) + 0;
        4:   92:		}while (tempCard == 16);
        4:   93:		testGame.deck[p][c] = tempCard;
        -:   94:	}
        -:   95:	
        -:   96:	//set all of the cards in the player's hand to something other than great_hall except for one
        1:   97:	h = numHandCards(&testGame);
        1:   98:	testGame.hand[p][0] = great_hall;
        5:   99:	for (c = 1; c < h; c++)
        -:  100:	{
        4:  101:		tempCard = 16; //16 is great_hall card in enum list
        -:  102:		do 
        -:  103:		{
        -:  104:			//Note: rand() % (max - min + 1) + min
        4:  105:			tempCard = rand() % (26 - 0 + 1) + 0;
        4:  106:		}while (tempCard == 16);
        4:  107:		testGame.hand[p][c] = tempCard;
        -:  108:	}
        -:  109:	
        1:  110:	cardEffect(great_hall, 0, 0, 0, &testGame, 0, 0);
        -:  111:	
        -:  112:	//check to see if any of the cards in the hand is the great_hall card
        1:  113:	h = numHandCards(&testGame);
        6:  114:	for (c = 0; c < h; c++)
        -:  115:	{
        5:  116:		if (testGame.hand[p][c] == great_hall)
        -:  117:		{
    #####:  118:			printf("Test failed: Great Hall card was not discarded.\n");
        -:  119:		}
        -:  120:	}
        -:  121:	
        1:  122:	printf("\nTests completed for Great Hall card.\n\n");
        -:  123:};
